=======================================================================
@SpringBootApplication
=======================================================================
This annotation is used on the application class while setting up a Spring Boot project. 
The class that is annotated with the @SpringBootApplication must be kept in the base package. 
The one thing that the @SpringBootApplication does is a component scan. But it will scan only its sub-packages. 
As an example, if you put the class annotated with @SpringBootApplication in com.example then @SpringBootApplication will 
scan all its sub-packages, such as com.example.a, com.example.b, and com.example.a.x.

The @SpringBootApplication is a convenient annotation that adds all the following:

@Configuration
@EnableAutoConfiguration
@ComponentScan



=======================================================================
@EnableAutoConfiguration
=======================================================================
This annotation is usually placed on the main application class. 
The @EnableAutoConfiguration annotation implicitly defines a base “search package”. 
This annotation tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.
In short it enables Auto Configuration.




=======================================================================
Running Spring boot Application - Different ways
=======================================================================
Running as a Packaged Application
-----------------------------------
If you use the Spring Boot Maven or Gradle plugins to create an executable jar, you can run your application using java -jar, 
as shown in the following example:

$ java -jar target/myapplication-0.0.1-SNAPSHOT.jar

It is also possible to run a packaged application with remote debugging support enabled. 
Doing so lets you attach a debugger to your packaged application, as shown in the following example:

$ java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n \
       -jar target/myapplication-0.0.1-SNAPSHOT.jar
	   
	   
Using the Maven Plugin
-------------------------
The Spring Boot Maven plugin includes a run goal that can be used to quickly compile and run your application. 
Applications run in an exploded form, as they do in your IDE. The following example shows a typical Maven command to run a Spring Boot application:

$ mvn spring-boot:run
You might also want to use the MAVEN_OPTS operating system environment variable, as shown in the following example:

$ export MAVEN_OPTS=-Xmx1024m


Using the Gradle Plugin
--------------------------------
The Spring Boot Gradle plugin also includes a bootRun task that can be used to run your application in an exploded form. 
The bootRun task is added whenever you apply the org.springframework.boot and java plugins and is shown in the following example:

$ gradle bootRun
You might also want to use the JAVA_OPTS operating system environment variable, as shown in the following example:

$ export JAVA_OPTS=-Xmx1024m





=======================================================================
Generate Auto Config Report
=======================================================================
Use --debug as program arguments to view the Auto Configuration Report
		// 1. Run as Configuration
		// 2. "--debug" as program Arguments
		// 3. Run the app to show AutoConfig eport on Console
		
		

=======================================================================		
Printing all the beans (including user defined) on the console
=======================================================================
		ApplicationContext ctx = SpringApplication.run(SpringbootFeaturesApplication.class, args);
		
		String[] beanNames = ctx.getBeanDefinitionNames();
		Arrays.sort(beanNames);
		for(String name : beanNames) {
			System.out.println(name);
		}

		
		
=======================================================================		
Change Server Port or Root Context Path
=======================================================================
in .properties file
--------------------
server.port = 8080
server.contextPath = /context-path


in .yml file
-------------
server:
    port: 8080
    contextPath: /context-path
	
	
=======================================================================
Custom favicon for Springboot application
=======================================================================
https://viralpatel.net/blogs/spring-boot-custom-favicon-example/





=======================================================================
Custom Starter Banner for Springboot application
=======================================================================
https://www.mkyong.com/spring-boot/spring-boot-custom-banner-example/

banner creator
--------------
https://devops.datenkollektiv.de/banner.txt/index.html





=======================================================================
Creating Executable JAR with Maven
=======================================================================
To Create executable JARs with Maven we need the "spring-boot-maven-plugin"
-add the spring-boot-maven-plugin to your pom
-Run mvn clean package
- JAR is created under target folder.




=======================================================================
How Component Scan Works in Spring boot
=======================================================================
https://springframework.guru/spring-component-scan/



=======================================================================
 Externalized Configuration
=======================================================================
Spring Boot uses a very particular PropertySource order that is designed to allow sensible overriding of values. Properties are considered in the following order:

1.Devtools global settings properties on your home directory (~/.spring-boot-devtools.properties when devtools is active).
2.@TestPropertySource annotations on your tests.
3.@SpringBootTest#properties annotation attribute on your tests.
4.Command line arguments.
5.Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property).
6.ServletConfig init parameters.
7.ServletContext init parameters.
8.JNDI attributes from java:comp/env.
9.Java System properties (System.getProperties()).
10.OS environment variables.
11.A RandomValuePropertySource that has properties only in random.*.
12.Profile-specific application properties outside of your packaged jar (application-{profile}.properties and YAML variants).
13.Profile-specific application properties packaged inside your jar (application-{profile}.properties and YAML variants).
14.Application properties outside of your packaged jar (application.properties and YAML variants).
15.Application properties packaged inside your jar (application.properties and YAML variants).
16.@PropertySource annotations on your @Configuration classes.
17.Default properties (specified by setting SpringApplication.setDefaultProperties).


=======================================================================
 Externalized Configuration - The Old way - @Value
=======================================================================




=======================================================================
 Externalized Configuration - The new way - @ConfigurationProperties
=======================================================================